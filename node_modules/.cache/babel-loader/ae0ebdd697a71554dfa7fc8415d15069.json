{"ast":null,"code":"var _jsxFileName = \"/Users/erachlin/pandemicProject/src/Experience.js\",\n    _s = $RefreshSig$();\n\nimport { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/vertex.js\";\nimport starFragmentShader from \"./shaders/fragment.js\";\nimport { extend } from \"@react-three/fiber\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\nlet lat = 15.6677 * (Math.PI / 180);\nlet lng = 96.5545 * (Math.PI / 180);\nlet x = Math.cos(lng) * Math.sin(lat) * 2;\nlet y = Math.sin(lng) * Math.sin(lat) * 2;\nlet z = Math.cos(lat) * 2;\nextend({\n  StarMaterial\n});\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  _s();\n\n  const props = useTexture({\n    map: \"earthMap.jpg\"\n  });\n  const {\n    radius,\n    tube\n  } = useControls({\n    radius: {\n      value: 0.09,\n      min: 0,\n      max: 1,\n      step: 0.01\n    },\n    tube: {\n      value: 0.02,\n      min: 0,\n      max: 0.1,\n      step: 0.01\n    }\n  });\n  useFrame(() => {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [x, y, z],\n      children: [/*#__PURE__*/_jsxDEV(\"torusGeometry\", {\n        args: [radius, tube, 16, 24, Math.PI * 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: 0xff0000\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), [...Array(400)].map(() => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [(Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50],\n      rotation: [getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2)],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.05, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"starMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(Experience, \"0ZvACCWtkj2vTBf3QLui1WexiFs=\", false, function () {\n  return [useTexture, useControls, useFrame];\n});\n\n_c = Experience;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"names":["OrbitControls","useTexture","shaderMaterial","THREE","TextureLoader","starVertexShader","starFragmentShader","extend","useFrame","useRef","useControls","StarMaterial","lat","Math","PI","lng","x","cos","sin","y","z","getRandom","min","max","random","Experience","props","map","radius","tube","value","step","Array"],"sources":["/Users/erachlin/pandemicProject/src/Experience.js"],"sourcesContent":["import { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/vertex.js\";\nimport starFragmentShader from \"./shaders/fragment.js\";\nimport { extend } from \"@react-three/fiber\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\n\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\n\nlet lat = 15.6677 * (Math.PI / 180);\nlet lng = 96.5545 * (Math.PI / 180);\n\nlet x = Math.cos(lng) * Math.sin(lat) * 2;\nlet y = Math.sin(lng) * Math.sin(lat) * 2;\nlet z = Math.cos(lat) * 2;\n\nextend({ StarMaterial });\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  const props = useTexture({ map: \"earthMap.jpg\" });\n\n  const { radius, tube } = useControls({\n    radius: {\n      value: 0.09,\n      min: 0,\n      max: 1,\n      step: 0.01,\n    },\n    tube: {\n      value: 0.02,\n      min: 0,\n      max: 0.1,\n      step: 0.01,\n    },\n  });\n\n  useFrame(() => {});\n\n  return (\n    <>\n      <OrbitControls />\n\n      <ambientLight intensity={0.2} />\n      <directionalLight />\n      <mesh>\n        <sphereGeometry args={[2, 32, 32]} />\n        <meshStandardMaterial {...props} />\n      </mesh>\n      <mesh position={[x, y, z]}>\n        <torusGeometry args={[radius, tube, 16, 24, Math.PI * 2]} />\n        <meshBasicMaterial color={0xff0000} />\n      </mesh>\n\n      {[...Array(400)].map(() => (\n        <mesh\n          position={[\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n          ]}\n          rotation={[\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n          ]}\n        >\n          <sphereGeometry args={[0.05, 32, 32]} />\n          <starMaterial />\n        </mesh>\n      ))}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}