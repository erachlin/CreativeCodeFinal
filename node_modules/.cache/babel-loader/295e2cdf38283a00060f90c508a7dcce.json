{"ast":null,"code":"var _jsxFileName = \"/Users/erachlin/pandemicProject/src/Experience.js\",\n    _s = $RefreshSig$();\n\nimport { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport sphereShader from \"./shaders/sphereShader.js\";\nimport sphereVertex from \"./shaders/sphereVertex.js\";\nimport sphereShader2 from \"./shaders/sphereShader2.js\";\nimport sphereVertex2 from \"./shaders/sphereVertex2.js\";\nimport { extend, useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\nconst GradientMaterial = shaderMaterial({\n  uTime: 0\n}, sphereVertex, sphereShader); //40.00789901806392, -105.27000601728639\n\nlet lat1 = 40.00789901806392 * (Math.PI / 180);\nlet lng1 = -105.27000601728639 * (Math.PI / 180);\nlet x1 = Math.cos(lat1) * Math.sin(lng1);\nlet y1 = Math.sin(lat1);\nlet z1 = Math.cos(lat1) * Math.cos(lng1); // 28.615205932605956, 77.27145735512924\n// let lat2 = 28.615205932605956 * (Math.PI / 180);\n// let lng2 = 77.27145735512924 * (Math.PI / 180);\n// 5.602651029866165, -0.18745686785037963\n\nlet lat2 = 5.60265102986616 * (Math.PI / 180);\nlet lng2 = -0.18745686785037963 * (Math.PI / 180);\nlet x2 = Math.cos(lat2) * Math.sin(lng2);\nlet y2 = Math.sin(lat2);\nlet z2 = Math.cos(lat2) * Math.cos(lng2);\nlet point1 = {\n  x: x1,\n  y: y1,\n  z: z1\n};\nlet point2 = {\n  x: x2,\n  y: y2,\n  z: z2\n};\n\nfunction getCurve(p1, p2) {\n  let v1 = new THREE.Vector3(p1.x, p1.y, p1.z);\n  let v2 = new THREE.Vector3(p2.x, p2.y, p2.z);\n  let points = [];\n\n  for (let i = 0; i < 20; i++) {\n    let p = new THREE.Vector3().lerpVectors(v1, v2, i / 20);\n    p.normalize();\n    p.multiplyScalar(1 + 0.1 * Math.sin(Math.PI * i / 20));\n    points.push(p);\n  }\n\n  let path = new THREE.CatmullRomCurve3(points);\n  return path;\n}\n\nlet curve = getCurve(point1, point2);\nextend({\n  StarMaterial,\n  GradientMaterial\n});\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  _s();\n\n  const props = useTexture({\n    map: \"earthMap.jpg\"\n  });\n  props.map.wrapS = THREE.RepeatWrapping; // You do not need to set `.wrapT` in this case\n\n  props.map.offset.x = 1.5708 / (2 * Math.PI);\n  useFrame(_ref => {\n    let {\n      clock\n    } = _ref;\n    return ref1.current.uTime = clock.getElapsedTime();\n  });\n  useFrame(_ref2 => {\n    let {\n      clock\n    } = _ref2;\n    return ref2.current.uTime = clock.getElapsedTime();\n  });\n  const ref1 = useRef();\n  const ref2 = useRef(); // const ref2 = useRef();\n\n  const locs = [[x1, y1, z1], [x2, y2, z2]];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [1, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [x2, y2, z2],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.025, 8, 8]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"gradientMaterial\", {\n        ref: ref1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [x1, y1, z1],\n      rotation: [0, 1, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.025, 8, 8]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"gradientMaterial\", {\n        ref: ref2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tubeGeometry\", {\n        args: [curve, 20, 0.005, 8, false]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), [...Array(400)].map(() => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [(Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50],\n      rotation: [getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2)],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.1, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"starMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n} // export default function ExampleComponent() {\n//   const props =  ;\n//   return (\n//     <>\n//     </>\n//   );\n// }\n\n_s(Experience, \"wHtcmO9s6glBaMd4uAqnvE4Fypk=\", false, function () {\n  return [useTexture, useFrame, useFrame];\n});\n\n_c = Experience;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"names":["OrbitControls","useTexture","shaderMaterial","THREE","TextureLoader","starVertexShader","starFragmentShader","sphereShader","sphereVertex","sphereShader2","sphereVertex2","extend","useFrame","useRef","useControls","StarMaterial","GradientMaterial","uTime","lat1","Math","PI","lng1","x1","cos","sin","y1","z1","lat2","lng2","x2","y2","z2","point1","x","y","z","point2","getCurve","p1","p2","v1","Vector3","v2","points","i","p","lerpVectors","normalize","multiplyScalar","push","path","CatmullRomCurve3","curve","getRandom","min","max","random","Experience","props","map","wrapS","RepeatWrapping","offset","clock","ref1","current","getElapsedTime","ref2","locs","Array"],"sources":["/Users/erachlin/pandemicProject/src/Experience.js"],"sourcesContent":["import { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport sphereShader from \"./shaders/sphereShader.js\";\nimport sphereVertex from \"./shaders/sphereVertex.js\";\nimport sphereShader2 from \"./shaders/sphereShader2.js\";\nimport sphereVertex2 from \"./shaders/sphereVertex2.js\";\nimport { extend, useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\n\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\n\nconst GradientMaterial = shaderMaterial(\n  { uTime: 0 },\n  sphereVertex,\n  sphereShader\n);\n\n//40.00789901806392, -105.27000601728639\n\nlet lat1 = 40.00789901806392 * (Math.PI / 180);\nlet lng1 = -105.27000601728639 * (Math.PI / 180);\n\nlet x1 = Math.cos(lat1) * Math.sin(lng1);\nlet y1 = Math.sin(lat1);\nlet z1 = Math.cos(lat1) * Math.cos(lng1);\n\n// 28.615205932605956, 77.27145735512924\n\n// let lat2 = 28.615205932605956 * (Math.PI / 180);\n// let lng2 = 77.27145735512924 * (Math.PI / 180);\n\n// 5.602651029866165, -0.18745686785037963\n\nlet lat2 = 5.60265102986616 * (Math.PI / 180);\nlet lng2 = -0.18745686785037963 * (Math.PI / 180);\n\nlet x2 = Math.cos(lat2) * Math.sin(lng2);\nlet y2 = Math.sin(lat2);\nlet z2 = Math.cos(lat2) * Math.cos(lng2);\n\nlet point1 = {\n  x: x1,\n  y: y1,\n  z: z1,\n};\n\nlet point2 = {\n  x: x2,\n  y: y2,\n  z: z2,\n};\n\nfunction getCurve(p1, p2) {\n  let v1 = new THREE.Vector3(p1.x, p1.y, p1.z);\n  let v2 = new THREE.Vector3(p2.x, p2.y, p2.z);\n  let points = [];\n  for (let i = 0; i < 20; i++) {\n    let p = new THREE.Vector3().lerpVectors(v1, v2, i / 20);\n    p.normalize();\n    p.multiplyScalar(1 + 0.1 * Math.sin((Math.PI * i) / 20));\n    points.push(p);\n  }\n\n  let path = new THREE.CatmullRomCurve3(points);\n  return path;\n}\n\nlet curve = getCurve(point1, point2);\n\nextend({ StarMaterial, GradientMaterial });\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  const props = useTexture({ map: \"earthMap.jpg\" });\n\n  props.map.wrapS = THREE.RepeatWrapping; // You do not need to set `.wrapT` in this case\n  props.map.offset.x = 1.5708 / (2 * Math.PI);\n\n  useFrame(({ clock }) => (ref1.current.uTime = clock.getElapsedTime()));\n\n  useFrame(({ clock }) => (ref2.current.uTime = clock.getElapsedTime()));\n\n  const ref1 = useRef();\n\n  const ref2 = useRef();\n\n  // const ref2 = useRef();\n\n  const locs = [\n    [x1, y1, z1],\n    [x2, y2, z2],\n  ];\n\n  return (\n    <>\n      <OrbitControls />\n\n      <ambientLight intensity={0.2} />\n      <directionalLight />\n      <mesh>\n        <sphereGeometry args={[1, 32, 32]} />\n        <meshStandardMaterial {...props} />\n      </mesh>\n      <mesh position={[x2, y2, z2]}>\n        <sphereGeometry args={[0.025, 8, 8]} />\n        <gradientMaterial ref={ref1} />\n      </mesh>\n      <mesh position={[x1, y1, z1]} rotation={[0, 1, 0]}>\n        <sphereGeometry args={[0.025, 8, 8]} />\n        <gradientMaterial ref={ref2} />\n      </mesh>\n      <mesh>\n        <tubeGeometry args={[curve, 20, 0.005, 8, false]} />\n        <meshBasicMaterial />\n      </mesh>\n      {/* {[...locs].map((loc) => (\n        <mesh position={[loc[0], loc[1], loc[2]]}>\n          <sphereGeometry args={[0.025, 8, 8]} />\n          <gradientMaterial ref={ref} />\n        </mesh>\n      ))} */}\n\n      {[...Array(400)].map(() => (\n        <mesh\n          position={[\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n          ]}\n          rotation={[\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n          ]}\n        >\n          <sphereGeometry args={[0.1, 32, 32]} />\n          <starMaterial />\n        </mesh>\n      ))}\n    </>\n  );\n}\n\n// export default function ExampleComponent() {\n//   const props =  ;\n\n//   return (\n//     <>\n\n//     </>\n//   );\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}