{"ast":null,"code":"var _jsxFileName = \"/Users/erachlin/pandemicProject/src/Experience.js\",\n    _s = $RefreshSig$();\n\nimport { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport waveVertexShader from \"./shaders/waveVertex.js\";\nimport waveFragmentShader from \"./shaders/waveFragment.js\";\nimport { extend, useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet depthColor = new THREE.Color(\"#d39b3c\");\nlet surfaceColor = new THREE.Color(\"6d1212\");\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\nconst WaveMaterial = shaderMaterial({\n  uTime: 0,\n  uBigWavesElevation: 0,\n  uBigWavesFrequency: new THREE.Vector2(0, 0),\n  uBigWavesSpeed: 0.75,\n  uSmallWavesElevation: 0.384,\n  uSmallWavesFrequency: 12.436,\n  uSmallWavesSpeed: 2.122,\n  uSmallIterations: 4,\n  uDepthColor: depthColor,\n  uSurfaceColor: surfaceColor,\n  uColorOffset: 0.244,\n  uColorMultiplier: 5\n}, waveVertexShader, waveFragmentShader);\nlet lat = 15.6677 * (Math.PI / 180);\nlet lng = 96.5545 * (Math.PI / 180);\nlet x = Math.cos(lng) * Math.sin(lat);\nlet y = Math.sin(lng) * Math.sin(lat) + 0.1;\nlet z = Math.cos(lat);\nextend({\n  StarMaterial,\n  WaveMaterial\n});\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  _s();\n\n  const props = useTexture({\n    map: \"earthMap.jpg\"\n  });\n  const {\n    radius,\n    tube,\n    rotation\n  } = useControls(\"geometry\", {\n    radius: {\n      value: 0.09,\n      min: 0,\n      max: 1,\n      step: 0.01\n    },\n    tube: {\n      value: 0.02,\n      min: 0,\n      max: 0.1,\n      step: 0.01\n    },\n    rotation: {\n      value: 0,\n      min: -Math.PI * 2,\n      max: Math.PI * 2,\n      step: 0.1\n    }\n  });\n  const {\n    color\n  } = useControls(\"shader\", {\n    color: depthColor\n  });\n  useFrame(_ref => {\n    let {\n      clock\n    } = _ref;\n    return ref.current.uTime = clock.getElapsedTime();\n  });\n  const ref = useRef();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [1, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [x, y, z],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.1, 16, 16]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"waveMaterial\", {\n        ref: ref,\n        attach: \"material\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), [...Array(400)].map(() => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [(Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50],\n      rotation: [getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2)],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.01, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"starMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(Experience, \"NoHqn9re2jmZI5f6EjgUg6SYZ1E=\", false, function () {\n  return [useTexture, useControls, useControls, useFrame];\n});\n\n_c = Experience;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"names":["OrbitControls","useTexture","shaderMaterial","THREE","TextureLoader","starVertexShader","starFragmentShader","waveVertexShader","waveFragmentShader","extend","useFrame","useRef","useControls","depthColor","Color","surfaceColor","StarMaterial","WaveMaterial","uTime","uBigWavesElevation","uBigWavesFrequency","Vector2","uBigWavesSpeed","uSmallWavesElevation","uSmallWavesFrequency","uSmallWavesSpeed","uSmallIterations","uDepthColor","uSurfaceColor","uColorOffset","uColorMultiplier","lat","Math","PI","lng","x","cos","sin","y","z","getRandom","min","max","random","Experience","props","map","radius","tube","rotation","value","step","color","clock","ref","current","getElapsedTime","Array"],"sources":["/Users/erachlin/pandemicProject/src/Experience.js"],"sourcesContent":["import { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport waveVertexShader from \"./shaders/waveVertex.js\";\nimport waveFragmentShader from \"./shaders/waveFragment.js\";\nimport { extend, useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\n\nlet depthColor = new THREE.Color(\"#d39b3c\");\nlet surfaceColor = new THREE.Color(\"6d1212\");\n\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\n\nconst WaveMaterial = shaderMaterial(\n  {\n    uTime: 0,\n    uBigWavesElevation: 0,\n    uBigWavesFrequency: new THREE.Vector2(0, 0),\n    uBigWavesSpeed: 0.75,\n    uSmallWavesElevation: 0.384,\n    uSmallWavesFrequency: 12.436,\n    uSmallWavesSpeed: 2.122,\n    uSmallIterations: 4,\n    uDepthColor: depthColor,\n    uSurfaceColor: surfaceColor,\n    uColorOffset: 0.244,\n    uColorMultiplier: 5,\n  },\n  waveVertexShader,\n  waveFragmentShader\n);\n\nlet lat = 15.6677 * (Math.PI / 180);\nlet lng = 96.5545 * (Math.PI / 180);\n\nlet x = Math.cos(lng) * Math.sin(lat);\nlet y = Math.sin(lng) * Math.sin(lat) + 0.1;\nlet z = Math.cos(lat);\n\nextend({ StarMaterial, WaveMaterial });\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  const props = useTexture({ map: \"earthMap.jpg\" });\n\n  const { radius, tube, rotation } = useControls(\"geometry\", {\n    radius: {\n      value: 0.09,\n      min: 0,\n      max: 1,\n      step: 0.01,\n    },\n    tube: {\n      value: 0.02,\n      min: 0,\n      max: 0.1,\n      step: 0.01,\n    },\n    rotation: {\n      value: 0,\n      min: -Math.PI * 2,\n      max: Math.PI * 2,\n      step: 0.1,\n    },\n  });\n\n  const { color } = useControls(\"shader\", {\n    color: depthColor,\n  });\n\n  useFrame(({ clock }) => (ref.current.uTime = clock.getElapsedTime()));\n\n  const ref = useRef();\n\n  return (\n    <>\n      <OrbitControls />\n\n      <ambientLight intensity={0.2} />\n      <directionalLight />\n      <mesh>\n        <sphereGeometry args={[1, 32, 32]} />\n        <meshStandardMaterial {...props} />\n      </mesh>\n      <mesh position={[x, y, z]}>\n        <sphereGeometry args={[0.1, 16, 16]} />\n        <waveMaterial ref={ref} attach=\"material\" />\n      </mesh>\n\n      {[...Array(400)].map(() => (\n        <mesh\n          position={[\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n          ]}\n          rotation={[\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n          ]}\n        >\n          <sphereGeometry args={[0.01, 32, 32]} />\n          <starMaterial />\n        </mesh>\n      ))}\n    </>\n  );\n}\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,cAApC,QAA0D,mBAA1D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,MAA5B;;;AAEA,IAAIC,UAAU,GAAG,IAAIV,KAAK,CAACW,KAAV,CAAgB,SAAhB,CAAjB;AACA,IAAIC,YAAY,GAAG,IAAIZ,KAAK,CAACW,KAAV,CAAgB,QAAhB,CAAnB;AAEA,MAAME,YAAY,GAAGd,cAAc,CAAC,EAAD,EAAKG,gBAAL,EAAuBC,kBAAvB,CAAnC;AAEA,MAAMW,YAAY,GAAGf,cAAc,CACjC;EACEgB,KAAK,EAAE,CADT;EAEEC,kBAAkB,EAAE,CAFtB;EAGEC,kBAAkB,EAAE,IAAIjB,KAAK,CAACkB,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAHtB;EAIEC,cAAc,EAAE,IAJlB;EAKEC,oBAAoB,EAAE,KALxB;EAMEC,oBAAoB,EAAE,MANxB;EAOEC,gBAAgB,EAAE,KAPpB;EAQEC,gBAAgB,EAAE,CARpB;EASEC,WAAW,EAAEd,UATf;EAUEe,aAAa,EAAEb,YAVjB;EAWEc,YAAY,EAAE,KAXhB;EAYEC,gBAAgB,EAAE;AAZpB,CADiC,EAejCvB,gBAfiC,EAgBjCC,kBAhBiC,CAAnC;AAmBA,IAAIuB,GAAG,GAAG,WAAWC,IAAI,CAACC,EAAL,GAAU,GAArB,CAAV;AACA,IAAIC,GAAG,GAAG,WAAWF,IAAI,CAACC,EAAL,GAAU,GAArB,CAAV;AAEA,IAAIE,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASF,GAAT,IAAgBF,IAAI,CAACK,GAAL,CAASN,GAAT,CAAxB;AACA,IAAIO,CAAC,GAAGN,IAAI,CAACK,GAAL,CAASH,GAAT,IAAgBF,IAAI,CAACK,GAAL,CAASN,GAAT,CAAhB,GAAgC,GAAxC;AACA,IAAIQ,CAAC,GAAGP,IAAI,CAACI,GAAL,CAASL,GAAT,CAAR;AAEAtB,MAAM,CAAC;EAAEO,YAAF;EAAgBC;AAAhB,CAAD,CAAN;;AAEA,SAASuB,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;EAC3B,OAAOV,IAAI,CAACW,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,IAA8BA,GAArC;AACD;;AAED,eAAe,SAASG,UAAT,GAAsB;EAAA;;EACnC,MAAMC,KAAK,GAAG5C,UAAU,CAAC;IAAE6C,GAAG,EAAE;EAAP,CAAD,CAAxB;EAEA,MAAM;IAAEC,MAAF;IAAUC,IAAV;IAAgBC;EAAhB,IAA6BrC,WAAW,CAAC,UAAD,EAAa;IACzDmC,MAAM,EAAE;MACNG,KAAK,EAAE,IADD;MAENT,GAAG,EAAE,CAFC;MAGNC,GAAG,EAAE,CAHC;MAINS,IAAI,EAAE;IAJA,CADiD;IAOzDH,IAAI,EAAE;MACJE,KAAK,EAAE,IADH;MAEJT,GAAG,EAAE,CAFD;MAGJC,GAAG,EAAE,GAHD;MAIJS,IAAI,EAAE;IAJF,CAPmD;IAazDF,QAAQ,EAAE;MACRC,KAAK,EAAE,CADC;MAERT,GAAG,EAAE,CAACT,IAAI,CAACC,EAAN,GAAW,CAFR;MAGRS,GAAG,EAAEV,IAAI,CAACC,EAAL,GAAU,CAHP;MAIRkB,IAAI,EAAE;IAJE;EAb+C,CAAb,CAA9C;EAqBA,MAAM;IAAEC;EAAF,IAAYxC,WAAW,CAAC,QAAD,EAAW;IACtCwC,KAAK,EAAEvC;EAD+B,CAAX,CAA7B;EAIAH,QAAQ,CAAC;IAAA,IAAC;MAAE2C;IAAF,CAAD;IAAA,OAAgBC,GAAG,CAACC,OAAJ,CAAYrC,KAAZ,GAAoBmC,KAAK,CAACG,cAAN,EAApC;EAAA,CAAD,CAAR;EAEA,MAAMF,GAAG,GAAG3C,MAAM,EAAlB;EAEA,oBACE;IAAA,wBACE,QAAC,aAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAc,SAAS,EAAE;IAAzB;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAA;MAAA;MAAA;IAAA,QAJF,eAKE;MAAA,wBACE;QAAgB,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR;MAAtB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,qCAA0BkC;MAA1B;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eASE;MAAM,QAAQ,EAAE,CAACV,CAAD,EAAIG,CAAJ,EAAOC,CAAP,CAAhB;MAAA,wBACE;QAAgB,IAAI,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV;MAAtB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAc,GAAG,EAAEe,GAAnB;QAAwB,MAAM,EAAC;MAA/B;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QATF,EAcG,CAAC,GAAGG,KAAK,CAAC,GAAD,CAAT,EAAgBX,GAAhB,CAAoB,mBACnB;MACE,QAAQ,EAAE,CACR,CAACd,IAAI,CAACW,MAAL,KAAgB,GAAjB,IAAwB,EADhB,EAER,CAACX,IAAI,CAACW,MAAL,KAAgB,GAAjB,IAAwB,EAFhB,EAGR,CAACX,IAAI,CAACW,MAAL,KAAgB,GAAjB,IAAwB,EAHhB,CADZ;MAME,QAAQ,EAAE,CACRH,SAAS,CAAC,CAAD,EAAIR,IAAI,CAACC,EAAL,GAAU,CAAd,CADD,EAERO,SAAS,CAAC,CAAD,EAAIR,IAAI,CAACC,EAAL,GAAU,CAAd,CAFD,EAGRO,SAAS,CAAC,CAAD,EAAIR,IAAI,CAACC,EAAL,GAAU,CAAd,CAHD,CANZ;MAAA,wBAYE;QAAgB,IAAI,EAAE,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX;MAAtB;QAAA;QAAA;QAAA;MAAA,QAZF,eAaE;QAAA;QAAA;QAAA;MAAA,QAbF;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,CAdH;EAAA,gBADF;AAkCD;;GAlEuBW,U;UACR3C,U,EAEqBW,W,EAqBjBA,W,EAIlBF,Q;;;KA5BsBkC,U"},"metadata":{},"sourceType":"module"}