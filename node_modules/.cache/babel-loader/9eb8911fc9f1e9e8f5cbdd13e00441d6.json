{"ast":null,"code":"var _jsxFileName = \"/Users/erachlin/pandemicProject/src/Experience.js\",\n    _s = $RefreshSig$();\n\nimport { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport waveVertexShader from \"./shaders/waveVertex.js\";\nimport waveFragmentShader from \"./shaders/waveFragment.js\";\nimport { extend } from \"@react-three/fiber\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet depthColor = new THREE.Color(\"#186691\");\nlet surfaceColor = new THREE.Color(\"#9bd8ff\");\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\nconst WaveMaterial = shaderMaterial({\n  uTime: {\n    value: 0\n  },\n  uBigWavesElevation: {\n    value: 0.2\n  },\n  uBigWavesFrequency: {\n    value: new THREE.Vector2(4, 1.5)\n  },\n  uBigWavesSpeed: {\n    value: 0.75\n  },\n  uSmallWavesElevation: {\n    value: 0.15\n  },\n  uSmallWavesFrequency: {\n    value: 3\n  },\n  uSmallWavesSpeed: {\n    value: 0.2\n  },\n  uSmallIterations: {\n    value: 4\n  },\n  uDepthColor: {\n    value: depthColor\n  },\n  uSurfaceColor: {\n    value: surfaceColor\n  },\n  uColorOffset: {\n    value: 0.08\n  },\n  uColorMultiplier: {\n    value: 5\n  }\n}, waveVertexShader, waveFragmentShader);\nlet lat = 15.6677 * (Math.PI / 180);\nlet lng = 96.5545 * (Math.PI / 180);\nlet x = Math.cos(lng) * Math.sin(lat) * 2;\nlet y = Math.sin(lng) * Math.sin(lat) * 2;\nlet z = Math.cos(lat) * 2;\nextend({\n  StarMaterial,\n  WaveMaterial\n});\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  _s();\n\n  const props = useTexture({\n    map: \"earthMap.jpg\"\n  });\n  const {\n    radius,\n    tube,\n    rotation\n  } = useControls({\n    radius: {\n      value: 0.09,\n      min: 0,\n      max: 1,\n      step: 0.01\n    },\n    tube: {\n      value: 0.02,\n      min: 0,\n      max: 0.1,\n      step: 0.01\n    },\n    rotation: {\n      value: 0,\n      min: -Math.PI * 2,\n      max: Math.PI * 2,\n      step: 0.1\n    }\n  });\n  useFrame(() => {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [x, y, z],\n      rotation: [rotation, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"torusGeometry\", {\n        args: [radius, tube, 16, 24, Math.PI * 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"waveMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), [...Array(400)].map(() => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [(Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50],\n      rotation: [getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2)],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.05, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"starMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(Experience, \"IzzLXFI3pj0VuJH4mzIUP2nJlyY=\", false, function () {\n  return [useTexture, useControls, useFrame];\n});\n\n_c = Experience;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"names":["OrbitControls","useTexture","shaderMaterial","THREE","TextureLoader","starVertexShader","starFragmentShader","waveVertexShader","waveFragmentShader","extend","useFrame","useRef","useControls","depthColor","Color","surfaceColor","StarMaterial","WaveMaterial","uTime","value","uBigWavesElevation","uBigWavesFrequency","Vector2","uBigWavesSpeed","uSmallWavesElevation","uSmallWavesFrequency","uSmallWavesSpeed","uSmallIterations","uDepthColor","uSurfaceColor","uColorOffset","uColorMultiplier","lat","Math","PI","lng","x","cos","sin","y","z","getRandom","min","max","random","Experience","props","map","radius","tube","rotation","step","Array"],"sources":["/Users/erachlin/pandemicProject/src/Experience.js"],"sourcesContent":["import { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport waveVertexShader from \"./shaders/waveVertex.js\";\nimport waveFragmentShader from \"./shaders/waveFragment.js\";\nimport { extend } from \"@react-three/fiber\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\n\nlet depthColor = new THREE.Color(\"#186691\");\nlet surfaceColor = new THREE.Color(\"#9bd8ff\");\n\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\n\nconst WaveMaterial = shaderMaterial(\n  {\n    uTime: { value: 0 },\n    uBigWavesElevation: { value: 0.2 },\n    uBigWavesFrequency: { value: new THREE.Vector2(4, 1.5) },\n    uBigWavesSpeed: { value: 0.75 },\n    uSmallWavesElevation: { value: 0.15 },\n    uSmallWavesFrequency: { value: 3 },\n    uSmallWavesSpeed: { value: 0.2 },\n    uSmallIterations: { value: 4 },\n    uDepthColor: { value: depthColor },\n    uSurfaceColor: { value: surfaceColor },\n    uColorOffset: { value: 0.08 },\n    uColorMultiplier: { value: 5 },\n  },\n  waveVertexShader,\n  waveFragmentShader\n);\n\nlet lat = 15.6677 * (Math.PI / 180);\nlet lng = 96.5545 * (Math.PI / 180);\n\nlet x = Math.cos(lng) * Math.sin(lat) * 2;\nlet y = Math.sin(lng) * Math.sin(lat) * 2;\nlet z = Math.cos(lat) * 2;\n\nextend({ StarMaterial, WaveMaterial });\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  const props = useTexture({ map: \"earthMap.jpg\" });\n\n  const { radius, tube, rotation } = useControls({\n    radius: {\n      value: 0.09,\n      min: 0,\n      max: 1,\n      step: 0.01,\n    },\n    tube: {\n      value: 0.02,\n      min: 0,\n      max: 0.1,\n      step: 0.01,\n    },\n    rotation: {\n      value: 0,\n      min: -Math.PI * 2,\n      max: Math.PI * 2,\n      step: 0.1,\n    },\n  });\n\n  useFrame(() => {});\n\n  return (\n    <>\n      <OrbitControls />\n\n      <ambientLight intensity={0.2} />\n      <directionalLight />\n      <mesh>\n        <sphereGeometry args={[2, 32, 32]} />\n        <meshStandardMaterial {...props} />\n      </mesh>\n      <mesh position={[x, y, z]} rotation={[rotation, 0, 0]}>\n        <torusGeometry args={[radius, tube, 16, 24, Math.PI * 2]} />\n        <waveMaterial />\n      </mesh>\n\n      {[...Array(400)].map(() => (\n        <mesh\n          position={[\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n          ]}\n          rotation={[\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n          ]}\n        >\n          <sphereGeometry args={[0.05, 32, 32]} />\n          <starMaterial />\n        </mesh>\n      ))}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}