{"ast":null,"code":"var _jsxFileName = \"/Users/erachlin/pandemicProject/src/Experience.js\",\n    _s = $RefreshSig$();\n\nimport { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport waveVertexShader from \"./shaders/waveVertex.js\";\nimport waveFragmentShader from \"./shaders/waveFragment.js\";\nimport { extend, useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet depthColor1 = new THREE.Color(\"#b34110\");\nlet surfaceColor1 = new THREE.Color(\"#111210\");\nlet depthColor2 = new THREE.Color(\"#72d90b\");\nlet surfaceColor2 = new THREE.Color(\"#ffffff\");\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader); // const WaveMaterial1 = shaderMaterial(\n//   {\n//     uTime: 0,\n//     uBigWavesElevation: 0,\n//     uBigWavesFrequency: new THREE.Vector2(0, 0),\n//     uBigWavesSpeed: 0.75,\n//     uSmallWavesElevation: 0.684,\n//     uSmallWavesFrequency: 12.436,\n//     uSmallWavesSpeed: 2.122,\n//     uSmallIterations: 4,\n//     uDepthColor: depthColor1,\n//     uSurfaceColor: surfaceColor1,\n//     uColorOffset: 0.244,\n//     uColorMultiplier: 5,\n//   },\n//   waveVertexShader,\n//   waveFragmentShader\n// );\n// const WaveMaterial2 = shaderMaterial(\n//   {\n//     uTime: 0,\n//     uBigWavesElevation: 0,\n//     uBigWavesFrequency: new THREE.Vector2(0, 0),\n//     uBigWavesSpeed: 0.75,\n//     uSmallWavesElevation: 1.684,\n//     uSmallWavesFrequency: 12.436,\n//     uSmallWavesSpeed: 2.122,\n//     uSmallIterations: 4,\n//     uDepthColor: depthColor2,\n//     uSurfaceColor: surfaceColor2,\n//     uColorOffset: 0.244,\n//     uColorMultiplier: 5,\n//   },\n//   waveVertexShader,\n//   waveFragmentShader\n// );\n//40.00789901806392, -105.27000601728639\n\nlet lat1 = 40.00789901806392 * (Math.PI / 180);\nlet lng1 = -105.27000601728639 * (Math.PI / 180);\nlet x1 = Math.cos(lat1) * Math.sin(lng1);\nlet y1 = Math.sin(lat1) + 0.25;\nlet z1 = Math.cos(lat1) * Math.cos(lng1); // 28.615205932605956, 77.27145735512924\n\nlet lat2 = 28.615205932605956 * (Math.PI / 180);\nlet lng2 = 77.27145735512924 * (Math.PI / 180);\nlet x2 = Math.cos(lat2) * Math.sin(lng2);\nlet y2 = Math.sin(lat2);\nlet z2 = Math.cos(lat2) * Math.cos(lng2);\nextend({\n  StarMaterial\n});\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  _s();\n\n  const props = useTexture({\n    map: \"earthMap.jpg\"\n  });\n  props.map.wrapS = THREE.RepeatWrapping; // You do not need to set `.wrapT` in this case\n\n  props.map.offset.x = 1.5708 / (2 * Math.PI); // const { radius, tube, rotation } = useControls(\"geometry\", {\n  //   radius: {\n  //     value: 0.09,\n  //     min: 0,\n  //     max: 1,\n  //     step: 0.01,\n  //   },\n  //   tube: {\n  //     value: 0.02,\n  //     min: 0,\n  //     max: 0.1,\n  //     step: 0.01,\n  //   },\n  //   rotation: {\n  //     value: 0,\n  //     min: -Math.PI * 2,\n  //     max: Math.PI * 2,\n  //     step: 0.1,\n  //   },\n  // });\n  // const { color } = useControls(\"shader\", {\n  //   color: depthColor1,\n  // });\n  // useFrame(({ clock }) => (ref.current.uTime = clock.getElapsedTime()));\n\n  const ref = useRef();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [1, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [x1, y1, z1],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.1, 8, 8]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [x2, y2, z2],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.1, 8, 8]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), [...Array(400)].map(() => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [(Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50, (Math.random() - 0.5) * 50],\n      rotation: [getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2), getRandom(0, Math.PI * 2)],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.1, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"starMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(Experience, \"GwonOX7lDfAhpfAB8PxSTbVLFzo=\", false, function () {\n  return [useTexture];\n});\n\n_c = Experience;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"names":["OrbitControls","useTexture","shaderMaterial","THREE","TextureLoader","starVertexShader","starFragmentShader","waveVertexShader","waveFragmentShader","extend","useFrame","useRef","useControls","depthColor1","Color","surfaceColor1","depthColor2","surfaceColor2","StarMaterial","lat1","Math","PI","lng1","x1","cos","sin","y1","z1","lat2","lng2","x2","y2","z2","getRandom","min","max","random","Experience","props","map","wrapS","RepeatWrapping","offset","x","ref","Array"],"sources":["/Users/erachlin/pandemicProject/src/Experience.js"],"sourcesContent":["import { OrbitControls, useTexture, shaderMaterial } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport starVertexShader from \"./shaders/starVertex.js\";\nimport starFragmentShader from \"./shaders/starFragment.js\";\nimport waveVertexShader from \"./shaders/waveVertex.js\";\nimport waveFragmentShader from \"./shaders/waveFragment.js\";\nimport { extend, useFrame } from \"@react-three/fiber\";\nimport { useRef } from \"react\";\nimport { useControls } from \"leva\";\n\nlet depthColor1 = new THREE.Color(\"#b34110\");\nlet surfaceColor1 = new THREE.Color(\"#111210\");\n\nlet depthColor2 = new THREE.Color(\"#72d90b\");\nlet surfaceColor2 = new THREE.Color(\"#ffffff\");\n\nconst StarMaterial = shaderMaterial({}, starVertexShader, starFragmentShader);\n\n// const WaveMaterial1 = shaderMaterial(\n//   {\n//     uTime: 0,\n//     uBigWavesElevation: 0,\n//     uBigWavesFrequency: new THREE.Vector2(0, 0),\n//     uBigWavesSpeed: 0.75,\n//     uSmallWavesElevation: 0.684,\n//     uSmallWavesFrequency: 12.436,\n//     uSmallWavesSpeed: 2.122,\n//     uSmallIterations: 4,\n//     uDepthColor: depthColor1,\n//     uSurfaceColor: surfaceColor1,\n//     uColorOffset: 0.244,\n//     uColorMultiplier: 5,\n//   },\n//   waveVertexShader,\n//   waveFragmentShader\n// );\n\n// const WaveMaterial2 = shaderMaterial(\n//   {\n//     uTime: 0,\n//     uBigWavesElevation: 0,\n//     uBigWavesFrequency: new THREE.Vector2(0, 0),\n//     uBigWavesSpeed: 0.75,\n//     uSmallWavesElevation: 1.684,\n//     uSmallWavesFrequency: 12.436,\n//     uSmallWavesSpeed: 2.122,\n//     uSmallIterations: 4,\n//     uDepthColor: depthColor2,\n//     uSurfaceColor: surfaceColor2,\n//     uColorOffset: 0.244,\n//     uColorMultiplier: 5,\n//   },\n//   waveVertexShader,\n//   waveFragmentShader\n// );\n\n//40.00789901806392, -105.27000601728639\n\nlet lat1 = 40.00789901806392 * (Math.PI / 180);\nlet lng1 = -105.27000601728639 * (Math.PI / 180);\n\nlet x1 = Math.cos(lat1) * Math.sin(lng1);\nlet y1 = Math.sin(lat1) + 0.25;\nlet z1 = Math.cos(lat1) * Math.cos(lng1);\n\n// 28.615205932605956, 77.27145735512924\n\nlet lat2 = 28.615205932605956 * (Math.PI / 180);\nlet lng2 = 77.27145735512924 * (Math.PI / 180);\n\nlet x2 = Math.cos(lat2) * Math.sin(lng2);\nlet y2 = Math.sin(lat2);\nlet z2 = Math.cos(lat2) * Math.cos(lng2);\n\nextend({ StarMaterial });\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default function Experience() {\n  const props = useTexture({ map: \"earthMap.jpg\" });\n\n  props.map.wrapS = THREE.RepeatWrapping; // You do not need to set `.wrapT` in this case\n  props.map.offset.x = 1.5708 / (2 * Math.PI);\n\n  // const { radius, tube, rotation } = useControls(\"geometry\", {\n  //   radius: {\n  //     value: 0.09,\n  //     min: 0,\n  //     max: 1,\n  //     step: 0.01,\n  //   },\n  //   tube: {\n  //     value: 0.02,\n  //     min: 0,\n  //     max: 0.1,\n  //     step: 0.01,\n  //   },\n  //   rotation: {\n  //     value: 0,\n  //     min: -Math.PI * 2,\n  //     max: Math.PI * 2,\n  //     step: 0.1,\n  //   },\n  // });\n\n  // const { color } = useControls(\"shader\", {\n  //   color: depthColor1,\n  // });\n\n  // useFrame(({ clock }) => (ref.current.uTime = clock.getElapsedTime()));\n\n  const ref = useRef();\n\n  return (\n    <>\n      <OrbitControls />\n\n      <ambientLight intensity={0.2} />\n      <directionalLight />\n      <mesh>\n        <sphereGeometry args={[1, 32, 32]} />\n        <meshStandardMaterial {...props} />\n      </mesh>\n      <mesh position={[x1, y1, z1]}>\n        <sphereGeometry args={[0.1, 8, 8]} />\n        <meshBasicMaterial />\n      </mesh>\n      <mesh position={[x2, y2, z2]}>\n        <sphereGeometry args={[0.1, 8, 8]} />\n        <meshBasicMaterial />\n      </mesh>\n\n      {[...Array(400)].map(() => (\n        <mesh\n          position={[\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n            (Math.random() - 0.5) * 50,\n          ]}\n          rotation={[\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n            getRandom(0, Math.PI * 2),\n          ]}\n        >\n          <sphereGeometry args={[0.1, 32, 32]} />\n          <starMaterial />\n        </mesh>\n      ))}\n    </>\n  );\n}\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,cAApC,QAA0D,mBAA1D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,MAA5B;;;AAEA,IAAIC,WAAW,GAAG,IAAIV,KAAK,CAACW,KAAV,CAAgB,SAAhB,CAAlB;AACA,IAAIC,aAAa,GAAG,IAAIZ,KAAK,CAACW,KAAV,CAAgB,SAAhB,CAApB;AAEA,IAAIE,WAAW,GAAG,IAAIb,KAAK,CAACW,KAAV,CAAgB,SAAhB,CAAlB;AACA,IAAIG,aAAa,GAAG,IAAId,KAAK,CAACW,KAAV,CAAgB,SAAhB,CAApB;AAEA,MAAMI,YAAY,GAAGhB,cAAc,CAAC,EAAD,EAAKG,gBAAL,EAAuBC,kBAAvB,CAAnC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIa,IAAI,GAAG,qBAAqBC,IAAI,CAACC,EAAL,GAAU,GAA/B,CAAX;AACA,IAAIC,IAAI,GAAG,CAAC,kBAAD,IAAuBF,IAAI,CAACC,EAAL,GAAU,GAAjC,CAAX;AAEA,IAAIE,EAAE,GAAGH,IAAI,CAACI,GAAL,CAASL,IAAT,IAAiBC,IAAI,CAACK,GAAL,CAASH,IAAT,CAA1B;AACA,IAAII,EAAE,GAAGN,IAAI,CAACK,GAAL,CAASN,IAAT,IAAiB,IAA1B;AACA,IAAIQ,EAAE,GAAGP,IAAI,CAACI,GAAL,CAASL,IAAT,IAAiBC,IAAI,CAACI,GAAL,CAASF,IAAT,CAA1B,C,CAEA;;AAEA,IAAIM,IAAI,GAAG,sBAAsBR,IAAI,CAACC,EAAL,GAAU,GAAhC,CAAX;AACA,IAAIQ,IAAI,GAAG,qBAAqBT,IAAI,CAACC,EAAL,GAAU,GAA/B,CAAX;AAEA,IAAIS,EAAE,GAAGV,IAAI,CAACI,GAAL,CAASI,IAAT,IAAiBR,IAAI,CAACK,GAAL,CAASI,IAAT,CAA1B;AACA,IAAIE,EAAE,GAAGX,IAAI,CAACK,GAAL,CAASG,IAAT,CAAT;AACA,IAAII,EAAE,GAAGZ,IAAI,CAACI,GAAL,CAASI,IAAT,IAAiBR,IAAI,CAACI,GAAL,CAASK,IAAT,CAA1B;AAEApB,MAAM,CAAC;EAAES;AAAF,CAAD,CAAN;;AAEA,SAASe,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;EAC3B,OAAOf,IAAI,CAACgB,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,IAA8BA,GAArC;AACD;;AAED,eAAe,SAASG,UAAT,GAAsB;EAAA;;EACnC,MAAMC,KAAK,GAAGrC,UAAU,CAAC;IAAEsC,GAAG,EAAE;EAAP,CAAD,CAAxB;EAEAD,KAAK,CAACC,GAAN,CAAUC,KAAV,GAAkBrC,KAAK,CAACsC,cAAxB,CAHmC,CAGK;;EACxCH,KAAK,CAACC,GAAN,CAAUG,MAAV,CAAiBC,CAAjB,GAAqB,UAAU,IAAIvB,IAAI,CAACC,EAAnB,CAArB,CAJmC,CAMnC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;;EAEA,MAAMuB,GAAG,GAAGjC,MAAM,EAAlB;EAEA,oBACE;IAAA,wBACE,QAAC,aAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAc,SAAS,EAAE;IAAzB;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAA;MAAA;MAAA;IAAA,QAJF,eAKE;MAAA,wBACE;QAAgB,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR;MAAtB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,qCAA0B2B;MAA1B;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eASE;MAAM,QAAQ,EAAE,CAACf,EAAD,EAAKG,EAAL,EAASC,EAAT,CAAhB;MAAA,wBACE;QAAgB,IAAI,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT;MAAtB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QATF,eAaE;MAAM,QAAQ,EAAE,CAACG,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAhB;MAAA,wBACE;QAAgB,IAAI,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT;MAAtB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAbF,EAkBG,CAAC,GAAGa,KAAK,CAAC,GAAD,CAAT,EAAgBN,GAAhB,CAAoB,mBACnB;MACE,QAAQ,EAAE,CACR,CAACnB,IAAI,CAACgB,MAAL,KAAgB,GAAjB,IAAwB,EADhB,EAER,CAAChB,IAAI,CAACgB,MAAL,KAAgB,GAAjB,IAAwB,EAFhB,EAGR,CAAChB,IAAI,CAACgB,MAAL,KAAgB,GAAjB,IAAwB,EAHhB,CADZ;MAME,QAAQ,EAAE,CACRH,SAAS,CAAC,CAAD,EAAIb,IAAI,CAACC,EAAL,GAAU,CAAd,CADD,EAERY,SAAS,CAAC,CAAD,EAAIb,IAAI,CAACC,EAAL,GAAU,CAAd,CAFD,EAGRY,SAAS,CAAC,CAAD,EAAIb,IAAI,CAACC,EAAL,GAAU,CAAd,CAHD,CANZ;MAAA,wBAYE;QAAgB,IAAI,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV;MAAtB;QAAA;QAAA;QAAA;MAAA,QAZF,eAaE;QAAA;QAAA;QAAA;MAAA,QAbF;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,CAlBH;EAAA,gBADF;AAsCD;;GAzEuBgB,U;UACRpC,U;;;KADQoC,U"},"metadata":{},"sourceType":"module"}